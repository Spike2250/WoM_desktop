from datetime import datetime
from wom.app_logic.service_func import datedif, count_age
from wom.settings.config import doc_dict


def list_created_docs(some_set):
    n = 0
    string = ''
    for i in some_set:
        n += 1
        string += f'{n} - {i};\n'
    return f"{string}  Всего:   {n}"


def update_doctor_data(d):
    d['код_врача'] = doc_dict[d['ФИО_врача']][1]
    d['ФИО_врача_полностью'] = doc_dict[d['ФИО_врача']][0]


def update_patient_info(d):

    d['ФИО_пациента'] = f"{d['фамилия']} {d['имя']} {d['отчество']}"
    d['возраст'] = count_age(d)

    today = datetime.now().strftime('%d.%m.%Y')
    typeHosp = d['тип_стационара']

    if typeHosp in {'Круглосуточный стационар', 'БТ - круглосуточный'}:
        bed_days = datedif(d['дата_поступления'], today) - 1
    else:
        bed_days = datedif(d['дата_поступления'], today)

    if 'дата_выписки' in d:
        if typeHosp in {'Круглосуточный стационар', 'БТ - круглосуточный'}:
            bed_days_f = datedif(d['дата_поступления'], d['дата_выписки']) - 1
        else:
            bed_days_f = datedif(d['дата_поступления'], d['дата_выписки'])

        if bed_days > bed_days_f:
            bed_days = bed_days_f
    else:
        if bed_days > 31:
            bed_days = '(?)'

    if 'номер_истории' not in d:
        d['номер_истории'] = ''

    d['Лого_ИБ'] = f"ФИО: {d['ФИО_пациента']}\n" \
                   f"Дата рождения: {d['дата_рождения']}г.р. " \
                   f"// {count_age(d)}    Палата № {d['палата']}\n" \
                   f"История болезни № {d['номер_истории']}\n" \
                   f"Дата поступления: {d['дата_поступления']} "\
                   f"// {bed_days} к/д"

    d['patient_info'] = f"{d['ФИО_пациента']}, {d['дата_рождения']}г.р. "\
                        f"// Возраст {count_age(d)}\n" \
                        f"История болезни № {d['номер_истории']}"

    d['patient_info_short'] = f"{d['ФИО_пациента']},\n"\
                              f"\t{d['дата_рождения']}г.р. "\
                              f"// {count_age(d)}\n" \
                              f"История болезни № {d['номер_истории']}\n"\
                              f"Палата № {d['палата']}\n"\
                              f"Дата поступления: {d['дата_поступления']}"


def update_after_passport_data(d):
    '''
    '''

    d['ФИО_пациента'] = f"{d['фамилия']} {d['имя']} {d['отчество']}"
    d['возраст'] = count_age(d)

    typeHosp = d['тип_стационара']
    if typeHosp in {'Круглосуточный стационар', 'БТ - круглосуточный'}:
        d['режим'] = 'III А'
        d['режим_развернутый'] = f'IIIA Палатный расширенный режим. ' \
                                 f'Больному разрешается дозированная ' \
                                 f'ходьба, подъемы по лестнице, прогулки ' \
                                 f'и т. д. Больной подготавливается к ' \
                                 f'бытовым нагрузкам. Применяемые ' \
                                 f'физические упражнения — гимнастические ' \
                                 f'упражнения, постепенно усложняющиеся по ' \
                                 f'форме, из различных исходных ' \
                                 f'положений, главным образом стоя, ' \
                                 f'упражнения с отягощением и умеренным ' \
                                 f'сопротивлением, метание мяча весом не  ' \
                                 f'более 1 кг. Темп —медленный и средний, ' \
                                 f'а для мелких мышечных групп — быстрый. ' \
                                 f'Ходьба — до 400—1000 м ' \
                                 f'(допустимы кратковременные ускорения). ' \
                                 f'Длительность занятий — 20—30 мин.'
    else:
        d['режим'] = 'III Б'
        d['режим_развернутый'] = f'IIIБ Общебольничный режим. Пациент ' \
                                 f'самостоятельно себя обслуживает, ' \
                                 f'осуществляет мероприятия личной гигиены, ' \
                                 f'свободно ходит по палате, по коридору, ' \
                                 f'в столовую. Ему могут быть разрешены ' \
                                 f'прогулки по территории больницы. ' \
                                 f'Лечебная гимнастика проводится ' \
                                 f'индивидуальным или малогрупповым ' \
                                 f'методом. Физическая нагрузка малая. ' \
                                 f'Используются лечебная гимнастика и ' \
                                 f'дозированная ходьба по ровной местности ' \
                                 f'на расстояние 0,5—1 км 1—2 раза в день. ' \
                                 f'Рекомендуются самостоятельные занятия, ' \
                                 f'включающие выполнение элементарных ' \
                                 f'движений мелкими мышечными группами ' \
                                 f'и дыхательные упражнения.'
        d['ДС'] = 'дн. стац.'  # для приписки в стат.талоне

    # добавление надписей, при невозможнссти пациента поставить подпись
    if d.get('не_может_подписаться', False):
        d['нмпп'] = 'не может подписаться'
        d['нмпп_дата_поступления'] = d['дата_поступления']
        d['нмпп_дата_выписки'] = d['дата_выписки_план']
        d['нмпп_ФИО_врача'] = d['ФИО_врача']
        d['нмпп_зав_отделением'] = d['зав_отделением']
    else:
        d['нмпп'] = ''
        d['нмпп_дата_поступления'] = ''
        d['нмпп_дата_выписки'] = ''
        d['нмпп_ФИО_врача'] = ''
        d['нмпп_зав_отделением'] = ''

    # если нет даты выписки в словаре
    if 'дата_выписки' not in d:
        d['дата_выписки'] = d['дата_выписки_план']
    update_patient_info(d)
    update_doctor_data(d)
